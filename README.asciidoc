RTEMS for Beagle Bone Black
===========================
:toc:

== Overview

This repository contains everything that is necessary to run an RTEMS
application on the Raspberry Pi. It includes the libbsd for USB, SD and
WiFi support.

Currently supported WiFi adapters are the RT8188EU and RT8188CUS based ones.

Building was tested on Arch GNU/Linux.

This repository is heavily based on the build scripts for
http://www.grisp.org[GRiSP] - a project that runs a Erlang VM on RTEMS. See the
https://github.com/grisp/grisp-software/[grisp-software] repository for the
original scripts.

== Organization

This repository is organized as follows:

- `apps`: Various RTEMS applications.
- `build`: Scripts that help building RTEMS and all tools.
- `debug`: Scripts to start a debugger. Currently only Segger is supported.
- `libs`: Libraries like RTEMS or libbsd.
- `tools`: Tools and other stuff that is generally useful (for example for
  generating a SD card image)
- `install` (generated): All tools and libraries will be installed in this
  folder.

== Building

=== Toolchain and Libraries

To build all necessary tools and libraries just call `./build/build.sh`. This
will install all that is necessary to build an application into the `install`
folder.

Note that if you have problems building U-Boot and there are errors of
redefinitions of a lot of `*fdt*` symbols, you most likely have a problem that
some system include files collide with the ones expected by U-Boot. I had to
uninstall my system `dtc` to solve that issue.

=== Application

After building the toolchain, you can build the WiFi sample application. To do
that, change into the `apps/wifi-sample` directory and call `make`.

You'll get a `b-beagleboneblack/wifi-sample_sdcard.img` that can be written to a
SD-Card using `dd` or some similar tool. Mount the SD card on your computer and
create a `wpa_supplicant.conf` in the root directory of the SD. An example can
be found in `wifi-sample/wpa_supplicant.conf`.

After that you can just put the SD-Card into a BBB (with recent U-Boot), connect
a RT8188EU based USB WiFi dongle and boot the system. There will be a shell on
the https://elinux.org/Beagleboard:BeagleBone_Black_Serial[serial port] of the
BBB. After the connection is established (take a look whether you got an IP via
DHCP with `ifconfig`) you can start an ftp-server using the `startftp` command
and do some file transfers.

== Boot process

Use an official up to date Linux image and replace kernel.img by one generated with:

    arm-rtems5-objcopy application.exe -Obinary kernel.img

== Debugging

=== Pi1

See https://github.com/dwelch67/raspberrypi/tree/master/armjtag for details.
Basically:

- Connect the JTAG pins correctly:

rev1 raspberry pi boards (older boards)

    ARM_VREF   P1-1
    ARM_TRST   P1-15  (GPIO 22 ALT4)
    ARM_TDI    P1-7   (GPIO  4 ALT5)
    ARM_TMS    S5-11  (GPIO 27 ALT4)
    ARM_TCK    P1-22  (GPIO 25 ALT4)
    ARM_TDO    P1-18  (GPIO 24 ALT4)
    ARM_GND    P1-25

rev2 raspberry pi boards

    ARM_VREF   P1-1
    ARM_TRST   P1-15  (GPIO 22 ALT4)
    ARM_TDI    P1-7   (GPIO  4 ALT5)
    ARM_TMS    P1-13  (GPIO 27 ALT4)
    ARM_TCK    P1-22  (GPIO 25 ALT4)
    ARM_TDO    P1-18  (GPIO 24 ALT4)
    ARM_GND    P1-25

The repo also contains a `armjtag.bin` (copy in this repo in the `debug` folder)
that sets up the correct alternative functions for the pins. Replace the
`kernel.img` on your SD card with that file. Then start the system and connect
the Debugger.

=== Pi2 (and newer?)

    ARM_VREF   P1-1
    ARM_TRST   P1-15  (GPIO 22 ALT4)
    ARM_TDI    P1-37  (GPIO 26 ALT4)
    ARM_TMS    P1-13  (GPIO 27 ALT4)
    ARM_TCK    P1-22  (GPIO 25 ALT4)
    ARM_TDO    P1-18  (GPIO 24 ALT4)
    ARM_GND    P1-25

Use the binary and configuration from `debug/rpi2`. The binary is an endless
loop. The configuration enables the debug pin.
